{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","setState","main","temp","sys","weather","undefined","stop","_x","apply","arguments","state","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dcaca29.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Titles extends Component {\r\n   \r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h1 className='title-container__title'>Weather Finder</h1>\r\n                <p className='title-container__subtitle'>Find out temperture, conditions and more...</p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Titles;","import React, { Component } from 'react';\r\nclass Form extends Component {\r\n    \r\n    render() { \r\n        return (  \r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <button>Get Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Form;","import React, { Component } from 'react';\r\nclass Weather extends Component {\r\n    \r\n    render() { \r\n        return ( \r\n            <div className='weather__info'>\r\n            {\r\n                this.props.city&&this.props.country && <p className='weather__key'>Location :\r\n               <span className='weather__value'> {this.props.city} {this.props.country}</span>\r\n                </p> \r\n            }\r\n             {\r\n                 this.props.temperature && <p className='weather__key'>Temperature :\r\n                 <span className='weather__value'>{this.props.temperature} </span>\r\n                 </p> \r\n             }\r\n             {\r\n                 this.props.humidity && <p className='weather__key'>Humidity :\r\n                 <span className='weather__value'>{this.props.humidity}</span>\r\n                 </p> \r\n             }  \r\n              {\r\n                  this.props.description && <p className='weather__key'>Conditions :\r\n                   <span className='weather__value'>{this.props.description}</span>\r\n                  </p> \r\n              }\r\n              {\r\n                  this.props.error &&<p className='weather__error'>{this.props.error}</p>\r\n              }\r\n              </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Weather;","import React,{Component} from 'react';\nimport './App.css';\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst API_KEY=\"50626e7973839b172498f778aa2e8307\";\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      temperature:undefined,\n      city:undefined,\n      country:undefined,\n      humidity:undefined,\n      description:undefined,\n      error:undefined\n    }\n  }\ngetWeather= async(e)=>{\n  e.preventDefault();\n  const city=e.target.elements.city.value;\n  const country=e.target.elements.country.value;\n  const api_call= await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`)\n  const data=await api_call.json();\n  if(city&&country)\n  {\n    console.log(data);\n  this.setState({\n    temperature:data.main.temp,\n    city:data.name,\n    country:data.sys.country,\n     humidity:data.main.humidity,\n     description:data.weather[0].description,\n     error: \"\"\n  });\n  }\n  else{\n    this.setState({\n      temperature:undefined,\n      city:undefined,\n      country:undefined,\n       humidity:undefined,\n       description:undefined,\n       error: \"Please enter the values\"\n    });\n\n  }\n}\n  render() { \n    return ( \n      <div >\n        <div className='wrapper'>\n         <div className='main'>\n          <div className='container'>\n           <div className='row'>\n             <div className='col-xs-5 title-container'>\n              <Titles/>\n             </div>\n             <div className='col-xs-7 form-container'>\n             <Form getWeather={this.getWeather}/>\n                  <Weather \n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error} />\n             </div>\n            </div> \n            </div> \n          </div> \n          </div> \n      </div>\n     );\n  }\n}\n \n\n        \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}